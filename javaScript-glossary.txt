Question 1: What is the Object type in JavaScript?

Junior-Level Answer:
The `Object` type in JavaScript is a collection of key-value pairs. It allows storing multiple values inside a single variable.
Objects store data in key-value pairs.
Keys are always strings, and values can be any data type (string, number, boolean, function, array, or even another object).

Example:
const person = { name: "Alice", age: 25, isStudent: false };
console.log(person.name); // Output: Alice


Mid-Level Answer:
The `Object` type is a fundamental reference data type used to store structured data. It serves as the base for all complex data structures in JavaScript, including Arrays, Functions, Maps, and Sets. JavaScript objects support prototypes and inheritance.


Example:
class Car {
    constructor(brand, model, year) {
        this.brand = brand;
        this.model = model;
        this.year = year;
    }
}
const myCar = new Car("Ford", "Mustang", 2022);
console.log(myCar);



Question 2: What is the `typeof` operator in JavaScript?

Junior-Level Answer:
The `typeof` operator in JavaScript is used to determine the data type of a given variable. It returns a string indicating the type of the operand.
Example:
console.log(typeof 42);         // Output: "number"
console.log(typeof "hello");    // Output: "string"
console.log(typeof true);       // Output: "boolean"

Mid-Level Answer:
The `typeof` operator is a unary operator in JavaScript that helps check the type of a given operand. It is useful for debugging and handling dynamic types but has some quirks, such as returning `"object"` for `null`. This is a historical JavaScript bug that still exists for backward compatibility.

Example: 
console.log(typeof null);       // Output: "object" (JavaScript quirk)
console.log(typeof undefined);  // Output: "undefined"
console.log(typeof {});         // Output: "object"
console.log(typeof []);         // Output: "object" (Arrays are a type of object)
console.log(typeof function(){}); // Output: "function"
