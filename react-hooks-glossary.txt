Qestion1: what are the advantages of using React Hooks?
Junior Engineer Response: 
React Hooks allow functional components to manage state and lifecycle features 
without needing class components. The main advantages are:  
1. Simplifies Code: No need for class components, making the code cleaner.  
2. Easier State Management: `useState()` makes handling state simple.  
3. Improves Readability & Reusability: Hooks separate logic from UI.  
4. Better Performance:Avoids unnecessary re-renders from class lifecycle methods.  
5. Encourages Functional Components:â€“ Functional components are easier to test and debug.  
Example Using `useState`:
import { useState } from "react";

function Counter() {
  const [count, setCount] = useState(0);

  return <button onClick={() => setCount(count + 1)}>Count: {count}</button>;
}

Mid-Level Engineer Response:  
React Hooks solve major issues in class components by allowing stateful logic in
functional components. Key benefits:  

1. No More Class Components:
   - Avoids complex class-based syntax (`this.state`, `this.setState`).  
   - Easier to read and maintain.  

2. Improved Code Reusability:
   -Custom Hooks (`useMyHook`) allow reusing logic across components.  

3. Better State Management  
   - `useState()` for simple state, `useReducer()` for complex state logic.  

4. Simplifies Side Effects with `useEffect()`
   - Eliminates class lifecycle methods like `componentDidMount`, `componentDidUpdate`.  

5. Performance Optimization  
   - `useMemo()` and `useCallback()` prevent unnecessary calculations & renders.  

6. Encourages Functional Programming 
   - Functional components are lightweight and declarative.  

Example Using `useEffect`: 
import { useState, useEffect } from "react";

function Timer() {
  const [seconds, setSeconds] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => setSeconds(s => s + 1), 1000);
    return () => clearInterval(interval); // Cleanup on unmount
  }, []);

  return <p>Timer: {seconds}s</p>;
}


question 2: How to Call Loading Functions with `useEffect` Only Once in React?**  
Junior Engineer Response: 
To run a function **only once when the component **mounts**, use `useEffect()` with an 
empty dependency array (`[]`).  

Example: 
import { useEffect } from "react";

function App() {
  useEffect(() => {
    console.log("This runs only once when the component mounts!");
  }, []); // Empty dependency array ensures it runs only once

  return <h1>Hello, World!</h1>;
}
 The empty array means there are **no dependencies** to watch, so `useEffect` runs only on the first render.  


Mid-Level Engineer Response:  
When fetching data or performing expensive operations, we want `useEffect` to run **only on mount**. This is useful for **fetching API data, subscribing to events, or setting up global listeners**.  

Correct Way:
import { useEffect, useState } from "react";

function FetchDataComponent() {
  const [data, setData] = useState(null);

  useEffect(() => {
    async function fetchData() {
      const response = await fetch("https://jsonplaceholder.typicode.com/posts/1");
      const result = await response.json();
      setData(result);
    }
    fetchData();
  }, []); // Empty array ensures it runs only once

  return <div>{data ? data.title : "Loading..."}</div>;
}
